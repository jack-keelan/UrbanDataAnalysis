sig_rate <- mean_rate/((source_dist/base_dist)^2)
sig_rate
mean_rate <- 300
base_rate <- 6000
base_dist <- 20
source_dist <- 280
sig_rate <- base_rate/((source_dist/base_dist)^2)
sig_rate
sig_rate <- base_rate/((source_dist/base_dist)^2.5)
sig_rate
sd_rate <- sqrt(mean_rate)
time_on <- 20*60
sample_bck <- rnorm(time_on, mean = mean_rate, sd = sd_rate )
sample_sig <- rnorm(time_on, mean = (mean_rate+sig_rate), sd = sd_rate )
histogram(sample_bck); histogram(sample_sig)
# Histogram Colored (blue and red)
hist(sample_bck, col=rgb(1,0,0,0.5),xlim=c(220,380), ylim=c(0,350), main="Overlapping Histogram", xlab="mean rate", breaks = 30 )
hist(sample_sig, col=rgb(0,0,1,0.5), add=T, breaks = 30)
abline(v=mean(sample_sig), lty=2, col="blue" )
abline(v=mean(sample_bck), lty=2, col="red" )
data_samp <- as.vector(matrix(0,nrow=(2*time_on) ) )
data_samp[1:(length(data_samp)/2) ] <- sample_bck
data_samp[((length(data_samp)/2) + 1):length(data_samp) ] <- sample_sig
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
sig_rate <- base_rate/((source_dist/base_dist)^3)
sd_rate <- sqrt(mean_rate)
time_on <- 20*60
sample_bck <- rnorm(time_on, mean = mean_rate, sd = sd_rate )
sample_sig <- rnorm(time_on, mean = (mean_rate+sig_rate), sd = sd_rate )
histogram(sample_bck); histogram(sample_sig)
# Histogram Colored (blue and red)
hist(sample_bck, col=rgb(1,0,0,0.5),xlim=c(220,380), ylim=c(0,350), main="Overlapping Histogram", xlab="mean rate", breaks = 30 )
hist(sample_sig, col=rgb(0,0,1,0.5), add=T, breaks = 30)
abline(v=mean(sample_sig), lty=2, col="blue" )
abline(v=mean(sample_bck), lty=2, col="red" )
data_samp <- as.vector(matrix(0,nrow=(2*time_on) ) )
data_samp[1:(length(data_samp)/2) ] <- sample_bck
data_samp[((length(data_samp)/2) + 1):length(data_samp) ] <- sample_sig
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
# Histogram Colored (blue and red)
hist(sample_bck, col=rgb(1,0,0,0.5),xlim=c(220,380), ylim=c(0,150), main="Overlapping Histogram", xlab="mean rate", breaks = 30 )
hist(sample_sig, col=rgb(0,0,1,0.5), add=T, breaks = 30)
abline(v=mean(sample_sig), lty=2, col="blue" )
abline(v=mean(sample_bck), lty=2, col="red" )
data_samp <- as.vector(matrix(0,nrow=(2*time_on) ) )
data_samp[1:(length(data_samp)/2) ] <- sample_bck
data_samp[((length(data_samp)/2) + 1):length(data_samp) ] <- sample_sig
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
sig_rate <- base_rate/((source_dist/base_dist)^2.5)
time_on <- 20*60
sd_rate <- sqrt(mean_rate)
sample_bck <- rnorm(time_on, mean = mean_rate, sd = sd_rate )
sample_sig <- rnorm(time_on, mean = (mean_rate+sig_rate), sd = sd_rate )
histogram(sample_bck); histogram(sample_sig)
# Histogram Colored (blue and red)
hist(sample_bck, col=rgb(1,0,0,0.5),xlim=c(220,380), ylim=c(0,150), main="Overlapping Histogram", xlab="mean rate", breaks = 30 )
abline(v=mean(sample_sig), lty=2, col="blue" )
hist(sample_sig, col=rgb(0,0,1,0.5), add=T, breaks = 30)
abline(v=mean(sample_bck), lty=2, col="red" )
data_samp[1:(length(data_samp)/2) ] <- sample_bck
data_samp[((length(data_samp)/2) + 1):length(data_samp) ] <- sample_sig
data_samp <- as.vector(matrix(0,nrow=(2*time_on) ) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
mean_rate <- 300
base_rate <- 6000
base_dist <- 20
source_dist <- 280
sig_rate <- base_rate/((source_dist/base_dist)^2.5)
sd_rate <- sqrt(mean_rate)
time_on <- 20*60
sample_bck <- rnorm(time_on, mean = mean_rate, sd = sd_rate )
sample_sig <- rnorm(time_on, mean = (mean_rate+sig_rate), sd = sd_rate )
histogram(sample_bck); histogram(sample_sig)
# Histogram Colored (blue and red)
hist(sample_bck, col=rgb(1,0,0,0.5),xlim=c(220,380), ylim=c(0,150), main="Overlapping Histogram", xlab="mean rate", breaks = 30 )
hist(sample_sig, col=rgb(0,0,1,0.5), add=T, breaks = 30)
abline(v=mean(sample_sig), lty=2, col="blue" )
abline(v=mean(sample_bck), lty=2, col="red" )
data_samp <- as.vector(matrix(0,nrow=(2*time_on) ) )
data_samp[1:(length(data_samp)/2) ] <- sample_bck
data_samp[((length(data_samp)/2) + 1):length(data_samp) ] <- sample_sig
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
mean_rate <- 300
base_rate <- 6000
base_dist <- 20
source_dist <- 280
sig_rate <- base_rate/((source_dist/base_dist)^3)
sd_rate <- sqrt(mean_rate)
time_on <- 20*60
sample_bck <- rnorm(time_on, mean = mean_rate, sd = sd_rate )
sample_sig <- rnorm(time_on, mean = (mean_rate+sig_rate), sd = sd_rate )
histogram(sample_bck); histogram(sample_sig)
# Histogram Colored (blue and red)
hist(sample_bck, col=rgb(1,0,0,0.5),xlim=c(220,380), ylim=c(0,150), main="Overlapping Histogram", xlab="mean rate", breaks = 30 )
hist(sample_sig, col=rgb(0,0,1,0.5), add=T, breaks = 30)
abline(v=mean(sample_sig), lty=2, col="blue" )
abline(v=mean(sample_bck), lty=2, col="red" )
data_samp <- as.vector(matrix(0,nrow=(2*time_on) ) )
data_samp[1:(length(data_samp)/2) ] <- sample_bck
data_samp[((length(data_samp)/2) + 1):length(data_samp) ] <- sample_sig
plot(1:(time_on*2), data_samp, ylim = c(0,400) )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
plot(1:(time_on*2), data_samp, ylim = c(0,400), title("Tc-99m that we missed") )
plot(1:(time_on*2), data_samp, ylim = c(0,400), title("Tc-99m that we missed (red=bkg, blue=sig)") )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
plot(1:(time_on*2), data_samp, ylim = c(200,400), title("Tc-99m that we missed (red=bkg, blue=sig)") )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
abline(v=2400, lty=2, col="green" )
abline(v=1200, lty=2, col="green" )
plot(1:(time_on*2), data_samp, ylim = c(200,400), title("Tc-99m that we missed (red=bkg, blue=sig)") )
abline(h=mean(sample_sig), lty=2, col="blue" )
abline(h=mean(sample_bck), lty=2, col="red" )
abline(v=1200, lty=2, col="green" )
## ggplot2 introduction ##
#library(ggplot2)
library(plyr)
library(dplyr)
## ggplot2 introduction ##
#library(ggplot2)
library(plyr)
library(dplyr)
setwd("C:/Users/mooreet_la/projects/SDRD/competition/")
setwd("C:/Users/mooreet_la/projects/SDRD/competition/")
setwd("C:/Users/mooreet/projects/SDRD/competition/")
setwd("C:/Users/mooreet/documents/projects/SDRD/competition/")
event <- read.csv("data/trainingData/100014.csv", header=FALSE, sep=",")
# visual
p_double_F_neg
p_only_RF
p_only_CNN
p_only_CNN_pred
p_only_CNN_byRFpred
p_union
p_intersect
p_intersect_byRF
p_intersect_byCNN
p_bad_RF
p_bad_CNN
90.722  Accuracy
90.722%  Accuracy
2.282% False positive rate
p_only_RF
90.722%  Accuracy
2.282% False positive rate
dim(df.2D_fNeg)
dim(df.fails_2D)
dim(df.fails_2D_onBKG)
41/167
dim(df.data)
dim(df.comb_data)
fNeg_120x144 <- ( dim(df.fails_2D_onBKG)/dim(df.comb_data) )
fNeg_120x144
fNeg_120x144 <- ( dim(df.fails_2D_onBKG)[1]/dim(df.comb_data)[1] )
fNeg_120x144
Acc_120x144 <- ( dim(df.fails_2D)[1]/dim(df.comb_data)[1] )
Acc_120x144
Acc_120x144 <- 1 - ( dim(df.fails_2D)[1]/dim(df.comb_data)[1] )
Acc_120x144
df.fails_sig <- subset(df.fails_2D, df.fails_2D$SourceID != 0 )
dim(df.fails_sig)
126+41
df.fails_sig <- subset(df.fails_sig, df.fails_sig$twoD_CNN_pred == 0 )
dim(df.fails_sig)
df.fails_sig <- subset(df.fails_2D, df.fails_2D$SourceID != 0 & df.fails_2D$twoD_CNN_pred != 0)
dim(df.fails_sig)
p_bad_CNN
p_bad_CNN_pred
df.fails_sig <- subset(df.fails_2D, df.fails_2D$SourceID != 0 & df.fails_2D$twoD_CNN_pred != 0)
fNeg_rate_120x144 <- ( dim(df.fails_sig)[1]/dim(df.comb_data)[1] )  ## No source present!
fNeg_rate_120x144
100000/4
################################################################################
library(dplyr)
library(tidyverse)
################################################################################
library(dplyr)
library(tidyverse)
setwd("C:/Users/mooreet/Documents/projects/SDRD/competition/")
install.packages("tidyverse")
################################################################################
library(dplyr)
library(tidyverse)
library(tidyverse)
setwd("C:/Users/mooreet/Documents/projects/SDRD/competition/")
# read in answers
answers <- read.csv("data/answers.csv", header = TRUE, sep = ",")
# read in answers
answers <- read.csv("data/answers.csv", header = TRUE, sep = ",")
answers <- answers[,-4]  #  They are stupid about their header commas
source("Eric_functions.R")
####################################### CURRENT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
input_path <- c("data/trainingData/listData/")
#input_path <- c("data/testingData/listData/")
#output_path2 <- c("data/integrated_128Ch/")
#output_path <- c("data/integrated_128Ch25s/")
output_path <- c("data/trainingData/integrated_32Ch_35Hz/")
#output_path <- c("data/testingData/integrated_128Ch25s/")
#output_path <- c("data/trainingData/integrated_64Ch25s/")
#output_path <- c("data/trainingData/integrated_32Ch25s/")
#output_path <- c("data/testingData/integrated_32Ch25s/")
bins <- 1024
#bins <- 128
#bins <- 64
#bins <- 32
Hz <- 35
int_length <- 1000000/Hz # integration window in microseconds
int_length
Hz=4
int_length <- 1000000/Hz # integration window in microseconds
int_length
#bins <- 128
#bins <- 64
#bins <- 32
Hz <- 35
int_length <- 1000000/Hz # integration window in microseconds
energy_range <- 2650  # energy range
i=14
evtID <- paste("4",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 10000){evtID <- paste("40",as.character(i),sep = "")}
if(i < 1000){evtID <- paste("400",as.character(i),sep = "")}
if(i < 100){evtID <- paste("4000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("40000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
dim(event)
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
dim(event)
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
View(event)
16914*35
460081/35
36,88,123,157
88-36
123-88
157-123
193-157
244-193
283-244
sum(event[1:36,1])
1000000/35
int_length
sum(event[1:37,1])
sum(event[37:88,1])
sum(event[37:87,1])
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
junk34 <- subset(event, event$V2 >= 2650)
dim(event)
dim(junk34)
View(junk34)
junk34 <- subset(event, event$V2 >= 2998)
dim(junk34)
junk34 <- subset(event, event$V2 >= 2650)
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
evts <- transform(subset(event)[,3:4], spec_num = as.integer(spec_num),
channel = as.integer(channel))
dim(evts)
spectra <- count_(evts, c("spec_num","channel"))
dim(spectra)
junk <- subset(spectra %>% spread(spec_num,n))[1:bins,]
dim(junk)
events_int <- (t(junk))[-1,]
dim(events_int)
View(junk)
View(junk[1:3,])
View(events_int[1:5,])
#output_path <- c("data/testingData/integrated_128Ch25s/")
#output_path <- c("data/trainingData/integrated_64Ch25s/")
#output_path <- c("data/trainingData/integrated_32Ch25s/")
#output_path <- c("data/testingData/integrated_32Ch25s/")
bins <- 1024
#bins <- 128
#bins <- 64
#bins <- 32
Hz <- 35
int_length <- 1000000/Hz # integration window in microseconds
energy_range <- 2650  # energy range
st_time <- Sys.time()
for(i in 1:99){
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  event <- read.csv(paste(input_path, "runID-", evtID, ".csv",sep = ""), header=FALSE, sep=",")
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
#  event[,129:256] <- events_int[,129:256]
evts <- transform(subset(event)[,3:4], spec_num = as.integer(spec_num),
channel = as.integer(channel))
spectra <- count_(evts, c("spec_num","channel"))
junk <- subset(spectra %>% spread(spec_num,n))[1:bins,]
events_int <- (t(junk))[-1,]
if(i %% 20 == 0){cur_time <- Sys.time() - st_time; print(i); print(cur_time)}
write.table(events_int, file = paste(output_path,evtID,".csv", sep = ""),
row.names=FALSE, col.names = FALSE, sep=",", na="0")
}
i=9801
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
i=9800
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
####################################### CURRENT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
input_path <- c("data/trainingData/listData/")
#input_path <- c("data/testingData/listData/")
#output_path2 <- c("data/integrated_128Ch/")
#output_path <- c("data/integrated_128Ch25s/")
output_path <- c("data/trainingData/integrated_32Ch_35Hz/")
#output_path <- c("data/testingData/integrated_128Ch25s/")
#output_path <- c("data/trainingData/integrated_64Ch25s/")
#output_path <- c("data/trainingData/integrated_32Ch25s/")
#output_path <- c("data/testingData/integrated_32Ch25s/")
bins <- 1024
#bins <- 128
#bins <- 64
#bins <- 32
Hz <- 35
int_length <- 1000000/Hz # integration window in microseconds
energy_range <- 2650  # energy range
st_time <- Sys.time()
for(i in 1:9800){
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  event <- read.csv(paste(input_path, "runID-", evtID, ".csv",sep = ""), header=FALSE, sep=",")
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
#  event[,129:256] <- events_int[,129:256]
evts <- transform(subset(event)[,3:4], spec_num = as.integer(spec_num),
channel = as.integer(channel))
spectra <- count_(evts, c("spec_num","channel"))
junk <- subset(spectra %>% spread(spec_num,n))[1:bins,]
events_int <- (t(junk))[-1,]
if(i %% 20 == 0){cur_time <- Sys.time() - st_time; print(i); print(cur_time)}
write.table(events_int, file = paste(output_path,evtID,".csv", sep = ""),
row.names=FALSE, col.names = FALSE, sep=",", na="0")
}
####################################### CURRENT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
input_path <- c("data/trainingData/listData/")
#input_path <- c("data/testingData/listData/")
#output_path2 <- c("data/integrated_128Ch/")
#output_path <- c("data/integrated_128Ch25s/")
output_path <- c("data/trainingData/integrated_32Ch_35Hz/")
#output_path <- c("data/testingData/integrated_128Ch25s/")
#output_path <- c("data/trainingData/integrated_64Ch25s/")
#output_path <- c("data/trainingData/integrated_32Ch25s/")
#output_path <- c("data/testingData/integrated_32Ch25s/")
bins <- 1024
#bins <- 128
#bins <- 64
#bins <- 32
Hz <- 35
int_length <- 1000000/Hz # integration window in microseconds
energy_range <- 2650  # energy range
st_time <- Sys.time()
for(i in 1:9800){
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  event <- read.csv(paste(input_path, "runID-", evtID, ".csv",sep = ""), header=FALSE, sep=",")
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
#  event[,129:256] <- events_int[,129:256]
evts <- transform(subset(event)[,3:4], spec_num = as.integer(spec_num),
channel = as.integer(channel))
spectra <- count_(evts, c("spec_num","channel"))
junk <- subset(spectra %>% spread(spec_num,n))[1:bins,]
events_int <- (t(junk))[-1,]
if(i %% 200 == 0){cur_time <- Sys.time() - st_time; print(i); print(cur_time)}
write.table(events_int, file = paste(output_path,evtID,".csv", sep = ""),
row.names=FALSE, col.names = FALSE, sep=",", na="0")
}
i=2
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
evt_len <- dim(event)[1]
evt_len
dim(event)
sum(event$V1)
sum(event$V1)/1000000
shortest_evt <- 50
shortest_evt <- 500
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
evt_len <- sum(event$V1)/1000000
if(evt_len <= shortest_evt){shortest_evt <- evt_len}
evt_len
shortest_evt
shortest_evt <- 50
st_time <- Sys.time()
for(i in 1:9800){
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  event <- read.csv(paste(input_path, "runID-", evtID, ".csv",sep = ""), header=FALSE, sep=",")
evt_len <- sum(event$V1)/1000000
if(evt_len <= shortest_evt){shortest_evt <- evt_len}
}
shortest_evt <- 50
st_time <- Sys.time()
for(i in 1:9800){
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  event <- read.csv(paste(input_path, "runID-", evtID, ".csv",sep = ""), header=FALSE, sep=",")
evt_len <- sum(event$V1)/1000000
if(evt_len <= shortest_evt){shortest_evt <- evt_len}
if(i %% 200 == 0){cur_time <- Sys.time() - st_time; print(i); print(cur_time)}
}
shortest_evt
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
####################################### CURRENT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
input_path <- c("data/trainingData/listData/")
#input_path <- c("data/testingData/listData/")
#output_path2 <- c("data/integrated_128Ch/")
#output_path <- c("data/integrated_128Ch25s/")
output_path <- c("data/trainingData/integrated_512Ch_12Hz/")
#output_path <- c("data/testingData/integrated_128Ch25s/")
#output_path <- c("data/trainingData/integrated_64Ch25s/")
#output_path <- c("data/trainingData/integrated_32Ch25s/")
#output_path <- c("data/testingData/integrated_32Ch25s/")
bins <- 512
#bins <- 128
#bins <- 64
#bins <- 32
Hz <- 12
int_length <- 1000000/Hz # integration window in microseconds
energy_range <- 2650  # energy range
shortest_evt <- 50
st_time <- Sys.time()
for(i in 1:9800){
evtID <- paste("10",as.character(i),sep = "")  ## '4' for testing   '10' for training
if(i < 1000){evtID <- paste("100",as.character(i),sep = "")}
if(i < 100){evtID <- paste("1000",as.character(i),sep = "")}
if(i < 10){evtID <- paste("10000",as.character(i),sep = "")}
event <- read.csv(paste(input_path, evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  event <- read.csv(paste(input_path, "runID-", evtID, ".csv",sep = ""), header=FALSE, sep=",")
#  evt_len <- sum(event$V1)/1000000
#  if(evt_len <= shortest_evt){shortest_evt <- evt_len}
#  if(i %% 200 == 0){cur_time <- Sys.time() - st_time; print(i); print(cur_time)}
#}
#shortest_evt
event[, 'spec_num'] <- cumsum(event[, 1]) %/% int_length
event[, 'channel'] <- event[, 2] %/% (energy_range/bins)
#  event[,129:256] <- events_int[,129:256]
evts <- transform(subset(event)[,3:4], spec_num = as.integer(spec_num),
channel = as.integer(channel))
spectra <- count_(evts, c("spec_num","channel"))
junk <- subset(spectra %>% spread(spec_num,n))[1:bins,]
events_int <- (t(junk))[-1,]
if(i %% 200 == 0){cur_time <- Sys.time() - st_time; print(i); print(cur_time)}
write.table(events_int, file = paste(output_path,evtID,".csv", sep = ""),
row.names=FALSE, col.names = FALSE, sep=",", na="0")
}
